	//**Property name ("usefullProperty")
	public static final String PROPERTY_NAME__USEFULL_PROPERTY = "usefullProperty" ;
	
	//**Property name ("usefullProperty"), element added
	public static final String PROPERTY_NAME__USEFULL_PROPERTY__PUT = "usefullProperty"+__EVENT_SUFFIX__PUT ;
	
	//**Property name ("usefullProperty"), collection added
	public static final String PROPERTY_NAME__USEFULL_PROPERTY__PUT_ALL = "usefullProperty"+__EVENT_SUFFIX__PUT_ALL ;
	
	//**Property name ("usefullProperty"), element removed
	public static final String PROPERTY_NAME__USEFULL_PROPERTY__REMOVE = "usefullProperty"+__EVENT_SUFFIX__REMOVE ;
	
	//**Property name ("usefullProperty"), collection cleared
	public static final String PROPERTY_NAME__USEFULL_PROPERTY__CLEAR = "usefullProperty"+__EVENT_SUFFIX__CLEAR ;
	
	//**Property "usefullProperty" : .
	private Map<String,String> myUsefullProperty = new HashMap<String,String>(10) ;
	
	/**Read accessor for property "usefullProperty" : .
	 *

	 *
	 * @return Property "usefullProperty".
	 *

	 */
	public Map<String,String> getUsefullProperty() {
		return new HashMap<String,String>(myUsefullProperty) ;
	}

	
	/**Write accessor for property "usefullProperty" : .
	 *

	 *
	 * @param usefullProperty Value of property "usefullProperty".
	 *

	 */
	public void setUsefullProperty(Map<String,String> usefullProperty) {
		Map<String,String> _oldValue = getUsefullProperty() ;
		myUsefullProperty.clear() ;
		myUsefullProperty.putAll(usefullProperty) ;
		__myPcs.firePropertyChange(PROPERTY_NAME__USEFULL_PROPERTY, _oldValue, getUsefullProperty());
	}
	
	//== START collection proxy for "usefullProperty" ==
	public void putUsefullProperty(String usefullPropertyKey, String usefullPropertyValue)
	{
		myUsefullProperty.put(usefullPropertyKey, usefullPropertyValue);
		__myPcs.firePropertyChange(PROPERTY_NAME__USEFULL_PROPERTY__PUT, usefullPropertyKey, usefullPropertyValue);
	}
	
	public void removeUsefullProperty(String usefullPropertyKey)
	{
	 	String _usefullPropertyValue = myUsefullProperty.get(usefullPropertyKey);
		myUsefullProperty.remove(usefullPropertyKey);
		__myPcs.firePropertyChange(PROPERTY_NAME__USEFULL_PROPERTY__REMOVE, usefullPropertyKey, _usefullPropertyValue);
	}
	
	public void clearUsefullProperty()
	{
		Map<String,String> _oldValue = getUsefullProperty() ;
		myUsefullProperty.clear();
		__myPcs.firePropertyChange(PROPERTY_NAME__USEFULL_PROPERTY__CLEAR, _oldValue, null);
	}
	
	public void putAllUsefullProperty(Map<String,String> usefullProperty)
	{
		Map<String,String> _oldValue = getUsefullProperty() ;
		myUsefullProperty.putAll(usefullProperty);
		__myPcs.firePropertyChange(PROPERTY_NAME__USEFULL_PROPERTY__PUT_ALL, _oldValue, usefullProperty);
	}
	
	//==
	public boolean containsKeyUsefullProperty(String usefullPropertyKey)
	{
		return myUsefullProperty.containsKey(usefullPropertyKey);
	}
	
	public boolean containsValueUsefullProperty(String usefullPropertyValue)
	{
		return myUsefullProperty.containsValue(usefullPropertyValue);
	}
	
	public boolean isEmptyUsefullProperty()
	{
		return myUsefullProperty.isEmpty();
	}
	//== END collection proxy for "usefullProperty" ==
	
	
	/**Fluent putAll for property "usefullProperty" : .
	 *

	 *
	 * @param usefullProperty new elements collection to add to the "usefullProperty" collection property.
	 *

	 */
	public DummyBean withUsefullProperty(Map<String,String> usefullProperty) {
		putAllUsefullProperty(usefullProperty) ;
		return this ;
	}
	
	/**Fluent put element for property "usefullProperty" : .
	 *

	 *
	 * @param usefullPropertyKey key of new element to add to the "usefullProperty" collection property.
	 * @param usefullPropertyValue value of new element to add to the "usefullProperty" collection property.
	 *

	 */
	public DummyBean withUsefullProperty(String usefullPropertyKey, String usefullPropertyValue) {
		putUsefullProperty(usefullPropertyKey, usefullPropertyValue) ;
		return this ;
	}
	
